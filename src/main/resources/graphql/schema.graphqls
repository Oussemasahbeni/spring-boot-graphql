scalar LocalDateTime
scalar Instant
scalar Long



type Query {
    getPosts: [Post]
    getCurrentUserPosts: [Post]
    getPostById(id: ID!): Post
    getPostsPage(
        page: Int! = 0,
        size: Int! = 10,
        sort: String = "id",
        sortDirection: String = "DESC",
        criteria: String = ""
    ): Page!

    getAuthors: [Author]
    getAuthorById(id: ID!): Author
    posts: [Post]
}

type Mutation {
    createPost(
        post: PostRequest!
    ): Post

    createBatchPosts(
        posts: [PostRequest!]!
    ): [Post]

    updatePost(
        id: ID!,
        post: PostRequest!
    ): Post

    deletePost(id: ID!): Boolean

    createAuthor(
        author: AuthorRequest!
    ): Author

    createBatchAuthors(
        authors: [AuthorRequest!]!
    ): [Author]

    deleteAuthor(id: ID!): Boolean

    updateAuthor(
        id: ID!,
        Author: AuthorRequest!
    ): Author
}


type Author {
    id: ID!
    name: String!
    email: String!
    bio: String
    posts(first: Int, after: String, last: Int, before: String): PostConnection
    birthDate: LocalDateTime
    createdAt: Instant!
    updatedAt: Instant!
    version: Int!
}

enum PostType {
    NEWS,
    ARTICLE,
    BLOG
}

input PostRequest {
    title: String!
    category: String!
    content: String!
    type: PostType!
    authorId: ID!
}

input AuthorRequest {
    name: String!
    email: String!
    bio: String,
    birthDate: LocalDateTime
}

type Post {
    id: ID!
    title: String!
    category: String!
    content: String!
    type: PostType!
    author: Author!
    createdAt: Instant!
    updatedAt: Instant
    version: Int!
}

type Page {
    content: [Post!]!
    totalPages: Int!
    totalElements: Long!
    pageNumber: Int!
    pageSize: Int!
}

